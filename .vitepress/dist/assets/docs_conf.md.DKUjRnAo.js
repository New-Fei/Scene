import{_ as o,c as a,o as c,ag as s}from"./chunks/framework.BgId8OS5.js";const f=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/conf.md","filePath":"docs/conf.md"}'),t={name:"docs/conf.md"};function p(l,e,n,i,d,r){return c(),a("div",null,e[0]||(e[0]=[s(`<h2 id="ddr-mapping-conf" tabindex="-1">DDR-MAPPING.CONF <a class="header-anchor" href="#ddr-mapping-conf" aria-label="Permalink to &quot;DDR-MAPPING.CONF&quot;">​</a></h2><ul><li><p>此配置用于指定CPU频率与DDR频率(下限)的映射关系</p></li><li><p>用于<code>辅助调速器</code>和<code>FAS、FAS Lite</code>控制频率的同时拉升DDR频率</p></li><li><p>此功能通常用于内存频率控制不佳的天玑处理器</p></li><li><p>这是一个例子：</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>APP   2600:6370 1800:5460 1500:4212 900:2067 0:800</span></span>
<span class="line"><span>GAME  2800:8528 2600:7488 2400:6370 2000:5460 1400:4212 0:2067</span></span>
<span class="line"><span>PERF  2600:8528 2400:7488 2100:6370 1800:5460 1300:4212 0:2067</span></span></code></pre></div></li><li><p>说明</p><blockquote><p><em>APP</em> 部分表示在普通应用中生效的配置（注：仅在辅助调速明确声明<code>ddr_boost</code>时生效）</p></blockquote><blockquote><p><em>GAME</em> 部分表示在<code>FAS</code>工作时生效的配置</p></blockquote><blockquote><p><em>PERF</em> 部分表示在基于<code>Perf Event</code>实现的<code>辅助调速器</code>工作时生效的配置， 例如 <code>FAS Lite</code>和EP配置中用到的<code>@ddr_l3_booster</code>函数</p></blockquote></li><li><p><code>FAS</code>和<code>FAS Lite</code>默认就会在受支持的设备上启用DDR、L3 Boost。</p></li><li><p>由于EP不使用FAS技术，则需要通过<code>@ddr_l3_booster</code>函数开启</p></li></ul><h2 id="fas-offset-conf" tabindex="-1">fas_offset.conf <a class="header-anchor" href="#fas-offset-conf" aria-label="Permalink to &quot;fas_offset.conf&quot;">​</a></h2><ul><li><p>此配置用于设定<code>FAS</code>在某个游戏内，中核和大核频率应保持怎样的比例</p><div class="language-conf vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">conf</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>com.tencent.tmgp.sgame=0.6</span></span>
<span class="line"><span>com.tencent.tmgp.sgamece=0.6</span></span></code></pre></div><blockquote><p>上面的配置表示，运行王者荣耀时，保持中核频率是大核频率的0.6倍</p></blockquote></li></ul><h2 id="fps-limit-conf" tabindex="-1">FPS_LIMIT.CONF <a class="header-anchor" href="#fps-limit-conf" aria-label="Permalink to &quot;FPS_LIMIT.CONF&quot;">​</a></h2><ul><li><p>用于实现对某个游戏进行锁帧。仅支持配置为可以整除<code>当前</code>刷新率的数值</p></li><li><p>例如 120Hz的屏幕则可以配置 30 40 60 等数值</p></li><li><p>可以配置多个数值，自动从前到后选择一个支持的数值</p></li><li><p>这么做，通常是为了让性能不足的设备，以一个可以相对较低但能稳定的帧率运行某个游戏</p></li><li><p>从而避免<code>FAS</code>因为帧率抖动幅度过大中途退出</p><div class="language-conf vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">conf</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>com.kurogame.mingchao=40,45,48</span></span></code></pre></div><blockquote><p>这可能需要搭配刷新率管理才能发挥作用</p></blockquote><blockquote><p>例如当前屏幕刷新率为60Hz，指定限制40帧不会生效</p></blockquote><blockquote><p>需要切换到120Hz后，刷新率可以被帧率整除，方可生效</p></blockquote></li></ul>`,6)]))}const h=o(t,[["render",p]]);export{f as __pageData,h as default};
