import{_ as a,c as i,o as n,ag as l}from"./chunks/framework.BgId8OS5.js";const r=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/outdated.md","filePath":"docs/outdated.md"}'),p={name:"docs/outdated.md"};function t(e,s,h,k,o,E){return n(),i("div",null,s[0]||(s[0]=[l(`<h2 id="过时的函数" tabindex="-1">过时的函数 <a class="header-anchor" href="#过时的函数" aria-label="Permalink to &quot;过时的函数&quot;">​</a></h2><ul><li><p>由于过于复杂或不实用已经不推荐使用的内置函数</p></li><li><p>又或者，极速模式下，我们想让处理器升频变的非常积极，同时让后台进程也可以比较正常的保持运行</p></li><li><p>则可以像这样配置</p></li></ul><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;platform&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;lahaina&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;platform_name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;骁龙888&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;schemes&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;performance&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;call&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;@set_priority&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;top-app&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;max&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;@set_priority&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;foreground&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;high&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;@set_priority&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;background&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;normal&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="补充说明" tabindex="-1">补充说明 <a class="header-anchor" href="#补充说明" aria-label="Permalink to &quot;补充说明&quot;">​</a></h4><ul><li>关乎处理器升降频积极性的全局参数，只会在调用 <strong><code>@set_priority</code> top-app [level]</strong> 时修改</li><li><code>high</code>、<code>max</code>、<code>turbo</code> 均会提高处理器升频积极性和重负载任务向大核迁移的积极性 <blockquote><p>注意：<code>turbo</code>级别会无条件的优先使用大核<br> 优先使用大核，在负载不高的情况下，能显著提高流畅度和响应速度<br><code>但</code>在高帧率的游戏和大型游戏中，单核性能要求往往非常之高，<br> 将过多的任务迁移至大核，可能会压垮本就负载极高的大核</p></blockquote></li></ul><h3 id="设置值-set-value" tabindex="-1">设置值 <code>@set_value</code> <a class="header-anchor" href="#设置值-set-value" aria-label="Permalink to &quot;设置值 \`@set_value\`&quot;">​</a></h3><ul><li>参数格式为 <strong>@set_value [path] [value]</strong></li><li>例如，我准备在省电模式下向指定路径写入值(示例中为意图关闭CPU7)</li></ul><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;schemes&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;powersave&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;call&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;@set_value&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/sys/devices/system/cpu/cpu7/online&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="补充说明-1" tabindex="-1">补充说明 <a class="header-anchor" href="#补充说明-1" aria-label="Permalink to &quot;补充说明&quot;">​</a></h4><blockquote><p><code>@set_value</code> 函数的拓展用法非常复杂，如果你还没有遇到需要特殊用法的场景，可以先略过本节，继续阅读其它说明<br> 留意，所有特殊用法都是在 [value] 上加特殊标识符</p></blockquote><ul><li>特殊用法：多次写入 <code>|</code>符号</li></ul><blockquote><p>下面这个例子是我们通过PPM，修改MTK处理器频率<br> 是指分两次分别写入<code>0 1991000</code>和<code>1 2025000</code></p></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&quot;call&quot;: [</span></span>
<span class="line"><span>  [&quot;@set_value&quot;, &quot;/proc/ppm/policy/hard_userlimit_max_cpu_freq&quot;, &quot;0 1991000|1 2025000&quot;]</span></span>
<span class="line"><span>]</span></span></code></pre></div><ul><li>所有特殊用法</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>多个值 如 123|223|323</span></span>
<span class="line"><span>只调大 如 ^223 或 &gt;223，说明：如属性当前值为 123, value指定^122 则不会执行写入，如果 value指定^124 会执行写入</span></span>
<span class="line"><span>只调小 如 &lt;123，说明：如属性当前值为 123, value指定^124 则不会执行写入，如果 value指定^122 会执行写入</span></span>
<span class="line"><span>锁定值 如 #123，说明：向指定属性写入123，完成将属性改为只读状态</span></span>
<span class="line"><span>校验值 如 true(enabled:true)，说明：如果属性当前值 是 enabled:true，则不执行写入</span></span>
<span class="line"><span>模糊校验 如 true(~enabled:true)，说明：如果属性当前值 包含 enabled:true，则不执行写入</span></span>
<span class="line"><span>不校验 如 =123，表示跳过比对属性当前值，即使属性当前值与value相等，也会执行写入</span></span>
<span class="line"><span>			* 框架默认会有比对逻辑，value直接写 111 等同于 111(111),</span></span>
<span class="line"><span>			* 但是注意，value包含 | 符号时无法执行校验，例如 1500|1700|1899 等同于 =1500|=1700|=1899</span></span>
<span class="line"><span></span></span>
<span class="line"><span>values 特殊格式 标识符特殊用法</span></span>
<span class="line"><span>正确示例</span></span>
<span class="line"><span>#^223 只上调数值，并锁定数值</span></span>
<span class="line"><span>#^1600000(boost_cluster_0:1600000) 只上调数值，并锁定数值</span></span>
<span class="line"><span>0 1600000|1 1400000|#1 1400000 分别向属性写入 0 1600000, 1 1400000, 1 1400000, 并在完成后锁定</span></span>
<span class="line"><span></span></span>
<span class="line"><span>错误示例</span></span>
<span class="line"><span>^#223 锁定标识符(#)和其它标识符共同使用时，#必须永远放在最前面</span></span></code></pre></div>`,15)]))}const c=a(p,[["render",t]]);export{r as __pageData,c as default};
