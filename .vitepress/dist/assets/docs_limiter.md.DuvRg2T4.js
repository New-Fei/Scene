import{_ as i,c as a,o as t,ag as e}from"./chunks/framework.BgId8OS5.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/limiter.md","filePath":"docs/limiter.md"}'),n={name:"docs/limiter.md"};function l(p,s,h,k,d,r){return t(),a("div",null,s[0]||(s[0]=[e(`<h3 id="辅助调速器" tabindex="-1">辅助调速器 <a class="header-anchor" href="#辅助调速器" aria-label="Permalink to &quot;辅助调速器&quot;">​</a></h3><ul><li>SCENE提供了辅助调速器来帮助控制CPU余量，用于解决使用内核/系统自带的调速器在特定场景下过于激进或过于保守</li><li>如果有需要，可以选择使用它。</li></ul><h3 id="基本配置" tabindex="-1">基本配置 <a class="header-anchor" href="#基本配置" aria-label="Permalink to &quot;基本配置&quot;">​</a></h3><ul><li>Limiter 的基础配置位于在 <code>features</code>， 但它并不是必须</li></ul><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;features&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;limiter&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;logger&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;params&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;p1:cpu0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;max&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1555200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;min&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">691200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;margin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">250</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;p1:cpu4&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;max&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2112000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;min&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">768000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;margin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">270</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;p1:cpu7&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;max&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2246400</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;min&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1171200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;margin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">250</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;idle:cpu0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;max&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1440000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;margin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">70</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;idle:cpu4&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;max&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1555200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;margin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">70</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;idle:cpu7&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;max&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1536000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;margin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">80</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;schemes&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;powersave&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;call&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;@limiters&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;p1:cpu0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;p1:cpu4&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;p1:cpu7&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><blockquote><p>下面的 <code>params</code> 则是添加了6条<code>limiter</code>执行策略</p></blockquote><ul><li>留意ID格式，例如：<code>p1:cpu0</code> 的 <code>:</code>后其实一个 <code>clusterExpr</code>，说明可以在<a href="./basic.html">基础</a>章节找到</li></ul><blockquote><p>通过 <code>@limiters</code> 就可以使用已添加的执行策略</p></blockquote><ul><li>调用<code>@limiters</code>时会先移除已经启用的限速器，再添加指定的限速器</li></ul><h3 id="工作模式" tabindex="-1">工作模式 <a class="header-anchor" href="#工作模式" aria-label="Permalink to &quot;工作模式&quot;">​</a></h3><ul><li>limiter 默认执行策略是<code>upper</code>，即根据指定的频率和余量，动态调整CPU频率上限(<code>scaling_max_freq</code>)</li><li>limiter 还有多种工作模式，具体如下：</li></ul><table tabindex="0"><thead><tr><th style="text-align:left;">mode</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">upper</td><td style="text-align:left;">根据负载和余量调整频率上限，频率写入<code>scaling_max_freq</code></td></tr><tr><td style="text-align:left;">bottom</td><td style="text-align:left;">根据负载和余量调整频率下限，频率写入<code>scaling_min_freq</code></td></tr><tr><td style="text-align:left;">performance</td><td style="text-align:left;">将CPU调速器更改为performance，并以upper模式继续工作</td></tr></tbody></table><h3 id="完整配置" tabindex="-1">完整配置 <a class="header-anchor" href="#完整配置" aria-label="Permalink to &quot;完整配置&quot;">​</a></h3><table tabindex="0"><thead><tr><th style="text-align:left;">参数</th><th style="text-align:left;">含义</th><th style="text-align:center;">类型</th></tr></thead><tbody><tr><td style="text-align:left;">id</td><td style="text-align:left;">格式为<code>**:[clusterExpr]</code>，必须在整套配置里保持不重名</td><td style="text-align:center;">string</td></tr><tr><td style="text-align:left;">mode</td><td style="text-align:left;">工作模式</td><td style="text-align:center;">string</td></tr><tr><td style="text-align:left;">max</td><td style="text-align:left;">最高频率限制(kHz)，0或不配置为不限制</td><td style="text-align:center;">int</td></tr><tr><td style="text-align:left;">min</td><td style="text-align:left;">最低频率限制(kHz)，0或不配置为不限制</td><td style="text-align:center;">int</td></tr><tr><td style="text-align:left;">margin</td><td style="text-align:left;">固定的余量(M Cycles)</td><td style="text-align:center;">int</td></tr><tr><td style="text-align:left;">margins</td><td style="text-align:left;">margin的增强版，支持按频率段设置余量</td><td style="text-align:center;">string</td></tr><tr><td style="text-align:left;">perfect</td><td style="text-align:left;">能效/功耗最佳平衡频率，默认是cluster支持的最高频率×0.8</td><td style="text-align:center;">int</td></tr><tr><td style="text-align:left;">smoothness</td><td style="text-align:left;">频率平滑度，默认<code>4</code>，最小为<code>1</code></td><td style="text-align:center;">int</td></tr><tr><td style="text-align:left;">mt</td><td style="text-align:left;">计算此cluster的负载时的多核负载权重, <code>0 ~ 100</code>，默认 <code>0</code></td><td style="text-align:center;">int</td></tr><tr><td style="text-align:left;">excludes</td><td style="text-align:left;">计算负载时排除的cpu核心，例如: [2, 3]</td><td style="text-align:center;">[]int</td></tr><tr><td style="text-align:left;">prefer</td><td style="text-align:left;">偏好，可配置为 <code>1</code>、<code>2</code>、<code>3</code>，默认<code>2</code></td><td style="text-align:center;">int</td></tr></tbody></table><h4 id="频率平滑度" tabindex="-1">频率平滑度 <a class="header-anchor" href="#频率平滑度" aria-label="Permalink to &quot;频率平滑度&quot;">​</a></h4><ul><li>有一种假设是，CPU在完成同样多计算任务时，使用相对稳定的中等频率，会比使用忽高忽低的频率更加节能</li><li>基于这种假设，Limiter刻意延缓了降频过程，使得CPU频率在游戏中更加平稳。</li><li>当<code>smoothness</code>设为4(默认是4)，则取前4个调速周期频率计算出<code>平均值</code>，</li><li>如果此时要降频，频率不能降到比<code>平均值</code>更低。这个策略对大多数游戏都是有益的。</li></ul><h4 id="偏好" tabindex="-1">偏好 <a class="header-anchor" href="#偏好" aria-label="Permalink to &quot;偏好&quot;">​</a></h4><ul><li>prefer需<code>smoothness</code>与配合使用</li><li>prefer 为1 表示 省电，此时<code>smoothness</code>失效，没有降频延迟，根据实时负载直接降频。由于用户空间负载准确性较差，一般不建议使用此值，以免频率剧烈波动</li><li>prefer 为2 表示 平衡，此时根据<code>smoothness</code>计算近期平均负载，如果实时负载低于近期平均负载，则使用近期平均负载决定频率</li><li>prefer 为3 表示 性能，此时根据<code>smoothness</code>计算近期最高负载，如果实时负载低于近期最高负载，则使用近期最高负载决定频率</li></ul><h4 id="余量" tabindex="-1">余量 <a class="header-anchor" href="#余量" aria-label="Permalink to &quot;余量&quot;">​</a></h4><ul><li>Limiter没有复杂的能效模型，也不会刻意限制使用更高的频率，因此余量的设置至关重要</li><li>同时，Limiter不支持百分比余量，而是使用了固定余量。这么做会有什么好处呢？</li></ul><h5 id="limiter的固定余量" tabindex="-1">Limiter的固定余量 <a class="header-anchor" href="#limiter的固定余量" aria-label="Permalink to &quot;Limiter的固定余量&quot;">​</a></h5><ul><li><p>先来看看Limiter的固定余量运算逻辑</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>loadRatio = 0.8</span></span>
<span class="line"><span>margin = 288</span></span>
<span class="line"><span></span></span>
<span class="line"><span>currentFreq = 700</span></span>
<span class="line"><span>expectCycles = currentFreq * loadRatio      // 560</span></span>
<span class="line"><span>nextFreq = expectCycles + margin            // 848</span></span>
<span class="line"><span>// expectCycles ÷ nextFreq = 0.66</span></span>
<span class="line"><span></span></span>
<span class="line"><span>currentFreq = 1200</span></span>
<span class="line"><span>expectCycles = currentFreq * loadRatio      // 960</span></span>
<span class="line"><span>nextFreq = expectCycles + margin            // 1248</span></span>
<span class="line"><span>// expectCycles ÷ nextFreq = 0.77</span></span>
<span class="line"><span></span></span>
<span class="line"><span>currentFreq = 2450</span></span>
<span class="line"><span>expectCycles = currentFreq * loadRatio      // 1960</span></span>
<span class="line"><span>nextFreq = expectCycles + margin            // 2248</span></span>
<span class="line"><span>// expectCycles ÷ nextFreq = 0.87</span></span></code></pre></div><ul><li>可以看出来，Limiter采用的固定余量，实际上会产生一个低频更激进高频更保守的效果</li><li>这让没有能源模型的Limiter也有了少许的高频抑制效果</li></ul></li></ul><h5 id="百分比余量" tabindex="-1">百分比余量 <a class="header-anchor" href="#百分比余量" aria-label="Permalink to &quot;百分比余量&quot;">​</a></h5><ul><li><p>作为对比，百分比余量会有什么缺点，为什么Limiter不采用呢？</p></li><li><p>假设，我们期望CPU负载达到70%时升频，所以marginRatio应该是0.3，看看运算逻辑</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>loadRatio = 0.8</span></span>
<span class="line"><span>marginRatio = 0.3</span></span>
<span class="line"><span></span></span>
<span class="line"><span>currentFreq = 700</span></span>
<span class="line"><span>expectCycles = currentFreq * loadRatio      // 560</span></span>
<span class="line"><span>nextFreq = expectCycles * (1 + marginRatio) // 728</span></span>
<span class="line"><span>// nextFreq - expectCycles = 168，expectCycles ÷ nextFreq = 0.77</span></span>
<span class="line"><span></span></span>
<span class="line"><span>currentFreq = 1200</span></span>
<span class="line"><span>expectCycles = currentFreq * loadRatio      // 960</span></span>
<span class="line"><span>nextFreq = expectCycles * (1 + marginRatio) // 1248</span></span>
<span class="line"><span>// nextFreq - expectCycles = 288，expectCycles ÷ nextFreq = 0.77</span></span>
<span class="line"><span></span></span>
<span class="line"><span>currentFreq = 2450</span></span>
<span class="line"><span>expectCycles = currentFreq * loadRatio      // 1960</span></span>
<span class="line"><span>nextFreq = expectCycles * (1 + marginRatio) // 2548</span></span>
<span class="line"><span>// nextFreq - nextFreq = 588，expectCycles ÷ nextFreq = 0.77</span></span></code></pre></div><ul><li>可以看出来，按比例设置余量并不科学，这会导致频率越高CPU的空余性能越多</li></ul></li></ul><h5 id="目标余量" tabindex="-1">目标余量 <a class="header-anchor" href="#目标余量" aria-label="Permalink to &quot;目标余量&quot;">​</a></h5><ul><li>Scene7.3 新增特性 target_margin，8.0后改名为<code>margins</code>，用于取代<code>margin</code>，支持设置不同频率下的余量</li><li>配置格式如：<code>400 2100000:300 2650000:200</code></li><li>这个例子表示： <blockquote><p>CPU频率处于 <code>0 ~ 2100000KHz</code> 余量为400MHz <br> CPU频率处于 <code>2100000KHz ~ 2650000KHz</code> 余量为300MHz <br> CPU频率高于 <code>2650000KHz</code> 余量为200Mhz</p></blockquote></li></ul><h4 id="多核负载权重-scene7-2" tabindex="-1">多核负载权重(Scene7.2+) <a class="header-anchor" href="#多核负载权重-scene7-2" aria-label="Permalink to &quot;多核负载权重(Scene7.2+)&quot;">​</a></h4><ul><li>先说两个定义 <blockquote><p>stLoad = Single Thread Load = cluster的各个核心最高负载<br> mtLoad = Multiple Thread Load = cluster的各个核心平均负载</p></blockquote></li><li>正在情况下，辅助调速器会根据<code>stLoad</code>决定是否调整频率</li><li>当<code>mt</code>指定为非<code>0</code>数值时，则负载算法变为： <blockquote><p>loadRatio = ( stLoad * (100 - mt) + mtLoad * mt ) / 100</p></blockquote></li><li>因为<code>mt</code>数值越大，该cluster越不容易因为单个线程高负载升频</li></ul><ul><li>注意：非游戏场景的非交互状态下，用于cluster0的辅助调速器，默认<code>mt</code>为<code>100</code>，其它情况下均默认为<code>0</code></li><li>不要在只有一颗核心的cluster上使用，以及确保设置<code>excludes</code>后参与负载计算的核心不少于两个</li></ul><h4 id="排除核心-scene7-2" tabindex="-1">排除核心(Scene7.2+) <a class="header-anchor" href="#排除核心-scene7-2" aria-label="Permalink to &quot;排除核心(Scene7.2+)&quot;">​</a></h4><ul><li><p>有时候我们会故意把所有垃圾进程、线程集中在一颗核心，从而把更多的核心留给重要的进程、线程</p></li><li><p>但是，一颗核心承载大量任务，可能会导致该cluster持续高负载，设置更高的<code>mt</code>又不利于该<code>cluster</code>上的其它任务正常运行</p></li><li><p>你只将核心添加到 <code>excludes</code> 即可解决问题，典型搭配示例如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// 内核cpuset配置</span></span>
<span class="line"><span>[&quot;/dev/cpuset/background/cpus&quot;, &quot;1&quot;],</span></span>
<span class="line"><span>[&quot;/dev/cpuset/top-app/cpus&quot;, &quot;0-7&quot;]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 调速器</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  &quot;id&quot;: &quot;p1:cpu0&quot;, &quot;margin&quot;: 300, &quot;excludes&quot;: [1] }</span></span>
<span class="line"><span>}</span></span></code></pre></div></li></ul><h3 id="启用辅助调速器" tabindex="-1">启用辅助调速器 <a class="header-anchor" href="#启用辅助调速器" aria-label="Permalink to &quot;启用辅助调速器&quot;">​</a></h3><ul><li><p><code>@limiters</code> 或 <code>@limiters+fas</code> 函数更换生效的调速器</p></li><li><p>发生场景切换(切换应用)后，SCENE会自动停止已经开启的调速器</p></li><li><p>因此，配置中通常只需要执行 <code>开启</code> 命令</p></li><li><p>如果一定要在某些时候主动关闭所有辅助调速器，可以用 <code>[&quot;@limiters&quot;, &quot;NONE&quot;]</code>来完成</p></li><li><p>SCENE8新增了FAS增强的辅助调速器，用于增强游戏体验。</p></li><li><p>基本原理是，如果近几秒发生明显的帧率波动，则自动适当提高余量，以提升频率或延缓降频。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 开启普通的辅助调速器(完全基于余量)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;@limiters&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;p1:cpu0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;p1:cpu4&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;p1:cpu7&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 开启FAS增强的辅助调速器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;@limiters+fas&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;p1:cpu0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;p1:cpu4&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;p1:cpu7&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div></li></ul>`,33)]))}const E=i(n,[["render",l]]);export{c as __pageData,E as default};
